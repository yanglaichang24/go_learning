package main

/*

  泛型
  本地go 版本低于1.8

 在Go语言中，泛型（Generics）是一种在编译时支持类型参数化的功能，它允许程序员编写可以处理多种数据类型的灵活代码。泛型在Go 1.18版本中被引入，通过引入类型参数（type parameters）和类型集（type sets）的概念来实现。

使用泛型，你可以定义具有类型参数的函数、类型和接口，然后在实例化这些泛型代码时指定具体的类型。这样，你可以编写更通用的代码，减少重复的代码量，并提高代码的可维护性。

下面是一个使用泛型的简单示例：

package main

import "fmt"

// 定义一个泛型函数，接受一个切片和切片中的元素类型T
func PrintSlice[T any](s []T) {
    for _, v := range s {
        fmt.Println(v) // 打印切片中的每个元素
    }
}

func main() {
    // 使用整数类型的切片调用泛型函数
    intSlice := []int{1, 2, 3, 4, 5}
    PrintSlice(intSlice)

    // 使用字符串类型的切片调用泛型函数
    strSlice := []string{"Hello", "World", "Go", "Generics"}
    PrintSlice(strSlice)
}
在上面的示例中，PrintSlice 函数是一个泛型函数，它接受一个切片 s 和切片中的元素类型 T。在函数内部，我们使用 range 循环遍历切片并打印每个元素。在 main 函数中，我们分别使用整数类型和字符串类型的切片调用 PrintSlice 函数，展示了泛型函数的灵活性。

通过使用泛型，你可以编写更通用的代码，而无需为每种数据类型重复编写相同的逻辑。这有助于减少代码量，提高代码的可读性和可维护性。

除了泛型函数，你还可以定义泛型类型和泛型接口。泛型类型允许你创建可以处理多种数据类型的自定义类型，而泛型接口则允许你定义可以接受多种类型的参数的接口。

请注意，泛型在Go语言中仍然是一个相对较新的特性，因此在使用泛型时，建议仔细阅读Go语言官方文档和相关资源，以确保正确使用泛型并了解其限制和限制

*/
func main() {

}
